<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://sambilbow.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sambilbow.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-02-10T14:27:18+00:00</updated><id>https://sambilbow.com/feed.xml</id><title type="html">blank</title><subtitle>Sam Bilbow - XR and Audio Software Developer based in Norwich.
</subtitle><entry><title type="html">üéõÔ∏è making a simple EQ with juce</title><link href="https://sambilbow.com/blog/2024/juce-eq/" rel="alternate" type="text/html" title="üéõÔ∏è making a simple EQ with juce" /><published>2024-02-10T09:00:00+00:00</published><updated>2024-02-10T09:00:00+00:00</updated><id>https://sambilbow.com/blog/2024/juce-eq</id><content type="html" xml:base="https://sambilbow.com/blog/2024/juce-eq/"><![CDATA[<div class="row">
    <div class="col-sm mt-1 mt-md-0" align="center">
        <div class="embed-responsive embed-responsive-16by9">
            <iframe src="https://www.youtube.com/embed/i_Iq4_Kd7Rc?si=cSaeSr2oEf2MJSId" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
        </div>
    </div>
</div>
<div class="caption">   
    JUCE Tutorial from <a href="https://www.youtube.com/matkatmusic">MadKat Music</a>        
</div>

<h2 id="summary">Summary</h2>
<p>While not the most glamorous audio application to start off with, I think an EQ will be a great start to learning the JUCE framework! I‚Äôll be following the above tutorial as a springboard for learning and implementing the JUCE framework <a href="/projects/juce">here</a>.</p>

<h2 id="part-1---introduction">Part 1 - Introduction</h2>
<ul>
  <li>Goal is to create a simple EQ, with a high and low cut (with gain and CF), and a central peak (with gain, Q, and freq)</li>
  <li>JUCE is a framework built on C++ for developing audio applications and plugins.</li>
  <li>Projucer is used to create projects and automatically populating the classes for you.</li>
</ul>

<h2 id="part-2---setting-up-the-project">Part 2 - Setting up the Project</h2>
<ul>
  <li>Follow steps <a href="/blog/2024/juce-linux">here</a></li>
  <li>Audio plugins in JUCE have two main <code class="language-plaintext highlighter-rouge">.cpp / .h</code> pairs, <code class="language-plaintext highlighter-rouge">PluginProcessor</code> and <code class="language-plaintext highlighter-rouge">PluginEditor</code>.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">PluginProcessor</code> handles our DSP and audio manipulation code</li>
      <li><code class="language-plaintext highlighter-rouge">PluginEditor</code> handles the GUI</li>
    </ul>
  </li>
</ul>

<h2 id="part-3---creating-audio-parameters">Part 3 - Creating Audio Parameters</h2>
<p><code class="language-plaintext highlighter-rouge">PluginProcessor.h</code> holds our class, which is pre-populated with a few class methods, the most important being</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">void prepareToPlay (double sampleRate, int samplesPerBlock) override;</code> <a href="https://docs.juce.com/master/classAudioProcessor.html#a44b74778247a35a669a3a994d814389e">docs page</a></li>
  <li><code class="language-plaintext highlighter-rouge">void processBlock (juce::AudioBuffer&lt;float&gt;&amp;, juce::MidiBuffer&amp;) override;</code></li>
</ul>

<p>We‚Äôre going to start by creating what is called a <code class="language-plaintext highlighter-rouge">AudioProcessorValueStateTree</code>, in our <code class="language-plaintext highlighter-rouge">PluginProcessor</code> header file, a class that will hold all of the values for our plugin parameters. However, one of the values it requires in its construction is a parameter layout, which we must first declare, and then define in our <code class="language-plaintext highlighter-rouge">PluginProccessor.cpp</code> file (snippet shown below).</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// PluginProcessor.cpp</span>
    <span class="c1">// Define the create layout function declared in the header file which returns a parameter layout</span>
    <span class="n">juce</span><span class="o">::</span><span class="n">AudioProcessorValueTreeState</span><span class="o">::</span><span class="n">ParameterLayout</span> <span class="n">SimpleEQAudioProcessor</span><span class="o">::</span><span class="n">createParameterLayout</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Create new parameter layout object</span>
        <span class="n">juce</span><span class="o">::</span><span class="n">AudioProcessorValueTreeState</span><span class="o">::</span><span class="n">ParameterLayout</span> <span class="n">layout</span><span class="p">;</span>

        <span class="c1">// Add parameters to layout object</span>
        <span class="c1">// New parameter for low cut frequency</span>
        <span class="n">layout</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">juce</span><span class="o">::</span><span class="n">AudioParameterFloat</span><span class="o">&gt;</span><span class="p">(</span>
            <span class="s">"LowCut Freq"</span><span class="p">,</span> 
            <span class="s">"LowCut Freq"</span><span class="p">,</span> 
            <span class="n">juce</span><span class="o">::</span><span class="n">NormalisableRange</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mf">20.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">20000.0</span><span class="n">f</span><span class="p">,</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span><span class="mf">1.0</span><span class="n">f</span><span class="p">),</span>
            <span class="mf">20.0</span><span class="n">f</span>
            <span class="p">));</span>
        
        <span class="c1">// Create a string array to hold the dB/Oct choices</span>
        <span class="n">juce</span><span class="o">::</span><span class="n">StringArray</span> <span class="n">slopeArray</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create new string</span>
            <span class="n">juce</span><span class="o">::</span><span class="n">String</span> <span class="n">str</span><span class="p">;</span>
            <span class="c1">// Store iterated value e.g. 12 + 0*12 = 12..24..36..48</span>
            <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">12</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">12</span><span class="p">);</span>
            <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s">" dB/Oct"</span><span class="p">;</span>
            <span class="n">slopeArray</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// New parameter for Low Cut Slope</span>
        <span class="n">layout</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">juce</span><span class="o">::</span><span class="n">AudioParameterChoice</span><span class="o">&gt;</span><span class="p">(</span>
            <span class="s">"LowCut Slope"</span><span class="p">,</span> <span class="c1">// parameter ID</span>
            <span class="s">"LowCut Slope"</span><span class="p">,</span> <span class="c1">// parmeter name</span>
            <span class="n">slopeArray</span><span class="p">,</span> <span class="c1">// array of choices</span>
            <span class="mi">0</span> <span class="c1">// default index</span>
        <span class="p">));</span>
        
        <span class="c1">// return the layout</span>
        <span class="k">return</span> <span class="n">layout</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// PluginProcessor.h (in public)</span>
    <span class="c1">// Declare parameter layout function that returns a parmateter layout</span>
    <span class="k">static</span> <span class="n">juce</span><span class="o">::</span><span class="n">AudioProcessorValueTreeState</span><span class="o">::</span><span class="n">ParameterLayout</span> <span class="nf">createParameterLayout</span><span class="p">();</span>

    <span class="c1">// Declare ValueStateTree object that holds all of the parameter values</span>
    <span class="n">juce</span><span class="o">::</span><span class="n">AudioProcessorValueTreeState</span> <span class="n">apvts</span> <span class="p">{</span><span class="o">*</span><span class="k">this</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="s">"Parameters"</span><span class="p">,</span> <span class="n">createParameterLayout</span><span class="p">()};</span>
</code></pre></div></div>
<p>Creating the parameter layout meant using some JUCE types, notably the <code class="language-plaintext highlighter-rouge">juce::AudioProcessorValueTreeState::ParameterLayout</code>, <code class="language-plaintext highlighter-rouge">juce::AudioParameterFloat&gt;</code>, and <code class="language-plaintext highlighter-rouge">juce::AudioParameterChoice</code> types. For the latter two, they were initialised as unique pointers using <code class="language-plaintext highlighter-rouge">std::make_unique&lt;datatype&gt;()</code> keyword. Additionally, <code class="language-plaintext highlighter-rouge">juce::NormalisableRange&lt;float&gt;()</code>was encountered, which is a in-built JUCE function that provides a range of values, it requires min, max, interval, and slew (linearity).</p>

<h2 id="part-4---setting-up-the-dsp">Part 4 - Setting up the DSP</h2>
<!-- ## Part 5 - Setting up Audio Plugin Host 
## Part 6 - Connecting the Peak Params 
## Part 7 - Connecting the LowCut Params 
## Part 8 - Refactoring the DSP
## Part 9 - Adding Sliders to GUI
## Part 10 - Draw the Response Curve
## Part 11 - Build the Response Curve Component
## Part 12 - Customize Slider Visuals
## Part 13 -  Response Curve Grid
## Part 14 - Spectrum Analyzer
## Part 15 - Bypass Buttons -->]]></content><author><name></name></author><category term="music" /><category term="opensource" /><category term="software" /><summary type="html"><![CDATA[exploring plugin design with a well established framework]]></summary></entry><entry><title type="html">üêß juce development on linux</title><link href="https://sambilbow.com/blog/2024/juce-linux/" rel="alternate" type="text/html" title="üêß juce development on linux" /><published>2024-02-10T08:00:00+00:00</published><updated>2024-02-10T08:00:00+00:00</updated><id>https://sambilbow.com/blog/2024/juce-linux</id><content type="html" xml:base="https://sambilbow.com/blog/2024/juce-linux/"><![CDATA[<h2 id="arch-linux--endeavouros-install">Arch Linux / EndeavourOS install</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">yay -S juce</code> This seems to install JUCE to <code class="language-plaintext highlighter-rouge">/usr/share/docs/juce</code> and <code class="language-plaintext highlighter-rouge">/usr/share/juce</code>, comes with Projucer, but doesn‚Äôt include examples. Therefore lets manually install them:</li>
  <li><code class="language-plaintext highlighter-rouge">git clone https://github.com/juce-framework/juce &lt;install_directory&gt;</code></li>
  <li>Change to the directory, and build the examples using:</li>
  <li><code class="language-plaintext highlighter-rouge">cmake . -B cmake-build -DJUCE_BUILD_EXAMPLES=ON -DJUCE_BUILD_EXTRAS=ON</code></li>
  <li><code class="language-plaintext highlighter-rouge">cmake --build cmake-build --target DemoRunner</code> (DemoRunner seems to crash straight away on my PC ‚Äì lets ignore this for the moment üòÇ)</li>
  <li>[Optional] Point Projucer to the repository files rather than the defaults <code class="language-plaintext highlighter-rouge">File &gt; Global Paths</code> then choose where you‚Äôve installed the JUCE git repository</li>
  <li>Projucer should now see the examples</li>
</ul>

<h2 id="setting-up-a-juce-projects">Setting up a JUCE Projects</h2>
<ul>
  <li>Use Projucer to create a new audio plugin</li>
  <li>Open the project in VS Code</li>
  <li>Import <code class="language-plaintext highlighter-rouge">.vscode</code> and <code class="language-plaintext highlighter-rouge">.gitignore</code>, stored <a href="https://github.com/sambilbow/juce-template-vscode">here</a>
    <ul>
      <li>Inspiration comes from  <a href="https://github.com/catman85/juce-plugin-template-vscode">catman85/juce-plugin-template-vscode</a></li>
      <li>Additionally <a href="https://github.com/icq4ever/emptyJUCEProject">icq4ever/emptyJUCEProject</a></li>
      <li>Maybe look at WolfSound‚Äôs <a href="https://github.com/JanWilczek/audio-plugin-template">setup</a> one day.</li>
    </ul>
  </li>
  <li>Make debug using <code class="language-plaintext highlighter-rouge">ctrl-shift-b</code> and select <code class="language-plaintext highlighter-rouge">Build debug</code></li>
  <li>Run the standalone by <code class="language-plaintext highlighter-rouge">cd Builds/LinuxMakeile/builds</code> and <code class="language-plaintext highlighter-rouge">./&lt;project_name&gt;</code></li>
</ul>

<h2 id="create-a-basic-audiomidi-plugin-part-1-setting-up">Create a basic Audio/MIDI plugin, Part 1: Setting up</h2>
<p>Source Tutorial: <a href="https://docs.juce.com/master/tutorial_create_projucer_basic_plugin.html">@ JUCE Docs</a></p>]]></content><author><name></name></author><category term="music" /><category term="opensource" /><category term="software" /><summary type="html"><![CDATA[exploring juce tutorials]]></summary></entry><entry><title type="html">ü•Ω i got a lynx-r1!</title><link href="https://sambilbow.com/blog/2024/lynxr1/" rel="alternate" type="text/html" title="ü•Ω i got a lynx-r1!" /><published>2024-01-31T09:00:00+00:00</published><updated>2024-01-31T09:00:00+00:00</updated><id>https://sambilbow.com/blog/2024/lynxr1</id><content type="html" xml:base="https://sambilbow.com/blog/2024/lynxr1/"><![CDATA[<div class="row">
    <div class="col-sm mt-2 mt-md-0">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/lynx-me-2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>

</div>

<h2 id="included">Included</h2>
<ul>
  <li>Lynx-R1 Mixed Reality Headset</li>
  <li>3-4 foot USB-C - USB-C cable</li>
  <li>VR interface</li>
  <li>Head strap</li>
  <li>Spare lens</li>
</ul>

<h2 id="quality">Quality</h2>
<p>The build quality is in general, pretty good, although the VR interface magnets aren‚Äôt glued in particularly well and I‚Äôve had to redo it myself.</p>

<h2 id="software">Software</h2>
<p>The Lynx comes with an integrated hub / launcher that comes with an onboarding experience, and the Wolvic browser. It can be run in AR/VR.</p>

<p>I assume it can be compiled to as an Android target with the right OpenXR loader. As Godot supports Lynx out of the box, I will probably choose that for development, following the below tutorial.</p>

<div class="row">
    <div class="col-sm mt-1 mt-md-0" align="center">
        <div class="embed-responsive embed-responsive-16by9">
            <iframe src="https://www.youtube.com/embed/shbHGhkh4NM?si=rSTMH02w-2KjM_Le" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
        </div>
    </div>
</div>
<div class="caption">   
    Godot OpenXR tutorial by Bastiaan Olij        
</div>

<p>I‚Äôll be updating this blog post with more use!</p>]]></content><author><name></name></author><category term="augmented-reality" /><category term="open-source" /><category term="linux" /><category term="hardware" /><summary type="html"><![CDATA[also: my application to be the next terminator]]></summary></entry><entry><title type="html">üì∑ xvisio on linux</title><link href="https://sambilbow.com/blog/2023/xvisio-linux/" rel="alternate" type="text/html" title="üì∑ xvisio on linux" /><published>2023-07-20T00:00:00+00:00</published><updated>2023-07-20T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/xvisio-linux</id><content type="html" xml:base="https://sambilbow.com/blog/2023/xvisio-linux/"><![CDATA[<h2 id="resources">Resources</h2>
<p>Latest release at time of writing is the September 9th version. Links may die, <code class="language-plaintext highlighter-rouge">../</code> up the tree until you find the right files if necessary</p>

<p>For Ubuntu</p>
<ul>
  <li><a href="https://download.xvisiotech.com/sdk-download/last_version/Select_Platform_Download/For%20Ubuntu/AMD64/xvsdk_3.2.0-20230907_bionic_amd64.deb">SDK (Bionic .deb)</a></li>
  <li><a href="https://download.xvisiotech.com/sdk-download/last_version/Select_Platform_Download/For%20Ubuntu/AMD64/xvsdk_3.2.0-20230907_focal_amd64.deb">SDK (Focal .deb)</a></li>
  <li><a href="https://download.xvisiotech.com/sdk-download/last_version/Select_Platform_Download/For%20Ubuntu/AMD64/xvsdk_3.2.0-20230907_amd64.snap">Viewer .snap</a></li>
</ul>

<p>For Arch (WIP)</p>
<ul>
  <li><a href="https://aur.archlinux.org/packages/xvsdk">SDK on AUR</a></li>
  <li><a href="https://aur.archlinux.org/packages/xvsdk-viewer">Viewer on AUR (requires snapd)</a></li>
</ul>

<h2 id="monado-driver">Monado Driver</h2>
<p>Work done by Mihir Patel on an open-source Xvisio driver can be found <a href="https://github.com/0xMihir/libxvisio/">on GitHub here</a>.</p>]]></content><author><name></name></author><category term="open-source" /><category term="linux" /><category term="software" /><category term="augmented-reality" /><summary type="html"><![CDATA[developing on arch linux]]></summary></entry><entry><title type="html">ü•± linux and email</title><link href="https://sambilbow.com/blog/2023/mail-stuff/" rel="alternate" type="text/html" title="ü•± linux and email" /><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/mail%20stuff</id><content type="html" xml:base="https://sambilbow.com/blog/2023/mail-stuff/"><![CDATA[<ul>
  <li>I really don‚Äôt like webmail!</li>
  <li>It frustrate, confuses, and distracts me!</li>
  <li>I like dedicated mail clients!</li>
</ul>

<p>Since something got deprecated somewhere, and someone doesn‚Äôt want to do X because of Y, theres only one specific way to set up institutional email on Linux, no more IMAP, no more POP; and this method is via Exchange Web Services. Theres a more informational and less ranty account <a href="https://douglasrumbaugh.com/post/microsoft-email-on-linux/">here</a>.</p>

<ul>
  <li>On GNOME: <code class="language-plaintext highlighter-rouge">yay -S evolution evolution-ews</code></li>
  <li>On KDE: <code class="language-plaintext highlighter-rouge">yay -S kmail kmailtransport kmail-account-wizard mbox-importer akonadi-import-wizard</code></li>
</ul>

<h2 id="evolution-gnome-project-email-client">Evolution (GNOME Project email client)</h2>
<ul>
  <li>Add an account with type <code class="language-plaintext highlighter-rouge">EWS</code></li>
  <li>Include ‚ÄòUsername‚Äô in <code class="language-plaintext highlighter-rouge">username@domain.ac.uk</code> format</li>
  <li>Set ‚ÄòHost URL‚Äô to <code class="language-plaintext highlighter-rouge">https://outlook.office365.com/ews/exchange.asmx</code></li>
  <li>Don‚Äôt click ‚ÄòFetch URL‚Äô</li>
  <li>Do not collect $200, and do not pass GO</li>
  <li>Set ‚ÄòAuthentication‚Äô to OAuth2</li>
  <li>Override settings</li>
  <li>Check ‚ÄòUse protocol version 2.0‚Äô</li>
  <li>Click ‚ÄòOK‚Äô</li>
</ul>

<div class="row">
    <div class="col-sm mt-1 mt-md-0">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/ews.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Screenshot showing Evolution EWS account settings" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>

<h2 id="kmail-kde-plasma-email-client">KMail (KDE Plasma email client)</h2>
<ul>
  <li>I gave up on KDE</li>
  <li>It‚Äôs really ugly</li>
  <li>Cluttered base UI</li>
</ul>]]></content><author><name></name></author><category term="open-source" /><category term="linux" /><category term="software" /><summary type="html"><![CDATA[getting oauth2 and ews working on linux]]></summary></entry><entry><title type="html">ü¶Ä learning rust [wip]</title><link href="https://sambilbow.com/blog/2023/learning-rust/" rel="alternate" type="text/html" title="ü¶Ä learning rust [wip]" /><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/learning-rust</id><content type="html" xml:base="https://sambilbow.com/blog/2023/learning-rust/"><![CDATA[<h4 id="resources">Resources</h4>
<hr />

<ul>
  <li><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ">Jayson Lennon‚Äôs Rust 101 Crash Course (6h)</a></li>
  <li><a href="https://doc.rust-lang.org/book/">The Rust Programming Book</a></li>
</ul>

<hr />
<h3 id="000203-rust-introduction"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=123s">00:02:03</a> Rust Introduction</h3>
<h4 id="why-rust">Why Rust?</h4>
<ul>
  <li>High level language features</li>
  <li>Program behaviours enforced at compile time = reliability</li>
  <li>Built in dependency management</li>
  <li>Growing ecosystem of libraries</li>
</ul>

<h4 id="technical-goodies">Technical goodies</h4>
<ul>
  <li>First class multi-threading (compiler error to improperly access shared data)</li>
  <li>Type System
    <ul>
      <li>Can uncover bugs at compile time</li>
      <li>Makes refactoring simple</li>
      <li>Reduces number of tests needed</li>
    </ul>
  </li>
  <li>Module system makes code separation simple</li>
  <li>Dependency is 1 line in a config file</li>
  <li>Tooling
    <ul>
      <li>Generate docs, lint code, and auto-form</li>
    </ul>
  </li>
</ul>

<hr />
<h3 id="000430-data-types"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=270s">00:04:30</a> Data types</h3>
<h2 id="what-is-data">What is data?</h2>
<ul>
  <li>Memory only stores binary data
    <ul>
      <li>But don‚Äôt worry! Anything can be represented in binary</li>
      <li>The program determines what this binary represents</li>
    </ul>
  </li>
  <li>There are some basic types that are universally useful, and these are provided by the language</li>
  <li>We‚Äôre not limited to these types, as we can make more</li>
</ul>

<h2 id="basic-data-types">Basic data types</h2>
<ul>
  <li>Boolean
    <ul>
      <li>True or false</li>
    </ul>
  </li>
  <li>Integer
    <ul>
      <li>1, 2, 50, -2</li>
    </ul>
  </li>
  <li>Double / Float
    <ul>
      <li>1.2, 5.5, 200.3</li>
    </ul>
  </li>
  <li>Character
    <ul>
      <li>‚ÄòA‚Äô, ‚Äòc‚Äô, ‚Äò$‚Äô, ‚Äò5‚Äô</li>
    </ul>
  </li>
  <li>
    <p>String</p>

    <ul>
      <li>‚ÄúHello‚Äù, ‚Äústring‚Äù, ‚Äúit‚Äôs 52‚Äù
<!-- --- --></li>
    </ul>
  </li>
</ul>

<!-- ### [00:06:59](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=419s) Variables -->
<h2 id="what-is-a-variable">What is a variable?</h2>
<ul>
  <li>A way to assign data to a temporary memory location
    <ul>
      <li>Allows programmer to easily work with memory</li>
    </ul>
  </li>
  <li>Can be set to any value &amp; type</li>
  <li>Immutable by default but can be mutable (less likely to make errors, and also faster since no checks needed)
    <ul>
      <li>Immutable: cannot be changed</li>
      <li>Mutable: can be changed</li>
    </ul>
  </li>
</ul>

<h2 id="examples">Examples</h2>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">two</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// let some variable named 'two' be assigned the value 2</span>
<span class="k">let</span> <span class="n">hello</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>
<span class="k">let</span> <span class="n">j</span> <span class="o">=</span> <span class="sc">'j'</span><span class="p">;</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">my_name</span> <span class="o">=</span> <span class="s">"Sam"</span><span class="p">;</span> <span class="c1">// let mut makes the variable mutable</span>
<span class="k">let</span> <span class="n">quit_program</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
<span class="k">let</span> <span class="n">your_half</span> <span class="o">=</span> <span class="n">my_half</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Variables make it easier to work with data, and therefore memory</li>
  <li>Variables can be assigned to any value including other variables</li>
</ul>

<!-- --- -->

<!-- ### [00:13:36](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=816s) Functions -->
<h2 id="what-are-functions">What are functions</h2>
<ul>
  <li>A way to encapsulate program functionality</li>
  <li>Optionally accept / return data</li>
  <li>Utilised for code organisation
    <ul>
      <li>Makes code easier to read too!</li>
    </ul>
  </li>
</ul>

<h2 id="anatomy-of-a-function">Anatomy of a function</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">fn</code> function</li>
  <li><code class="language-plaintext highlighter-rouge">add</code> name</li>
  <li><code class="language-plaintext highlighter-rouge">(z: y)</code> parameters with name <code class="language-plaintext highlighter-rouge">z</code> with type <code class="language-plaintext highlighter-rouge">y</code></li>
  <li><code class="language-plaintext highlighter-rouge">-&gt; x</code> return with type <code class="language-plaintext highlighter-rouge">x</code></li>
  <li><code class="language-plaintext highlighter-rouge">{}</code>  body</li>
  <li>Last expression is implicitly treated as the return, do not append it with <code class="language-plaintext highlighter-rouge">;</code></li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
	<span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-a-function">Using a function</h2>

<ul>
  <li>‚ÄúCall‚Äù a function by using its name, and adding any ‚Äòarguments‚Äô you want to pass to the parameters in the function
    <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="k">let</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="k">let</span> <span class="n">z</span> <span class="o">=</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div>    </div>
    <hr />
  </li>
</ul>

<h3 id="002152-println-macro"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=1312s">00:21:52</a> <code class="language-plaintext highlighter-rouge">println!</code> macro</h3>
<ul>
  <li>Macros (denoted with <code class="language-plaintext highlighter-rouge">!</code>) are similar to functions, but they expand into additional code</li>
  <li><code class="language-plaintext highlighter-rouge">println</code> ‚ÄúPrints‚Äù information to the terminal, which is useful for debugging</li>
  <li>It prints what is inside the quotation marks <code class="language-plaintext highlighter-rouge">""</code></li>
  <li>Tokens are substituted with the variable, and they are denoted with curly braces <code class="language-plaintext highlighter-rouge">{}</code></li>
  <li>After the <code class="language-plaintext highlighter-rouge">""</code> quotation marks, variables can be listed and comma-separated.</li>
  <li>Alternatively they can be invoked in-line, e.g. <code class="language-plaintext highlighter-rouge">println!("{var:?}");</code> instead of <code class="language-plaintext highlighter-rouge">println!("{:?}", var);</code></li>
  <li>Debug only print by using <code class="language-plaintext highlighter-rouge">:?</code></li>
  <li>End-user display without <code class="language-plaintext highlighter-rouge">:?</code>, e.g. <code class="language-plaintext highlighter-rouge">println!("{var}");</code></li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">life</span><span class="p">:</span> <span class="nb">i32</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"hello"</span><span class="p">);</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span> <span class="n">life</span><span class="p">);</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"{:?} {:?}"</span><span class="p">,</span> <span class="n">life</span><span class="p">,</span> <span class="n">life</span><span class="p">);</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"the meaning is {life:?}"</span><span class="p">);</span> <span class="c1">// in line variable invocation</span>
</code></pre></div></div>

<hr />

<h3 id="002457-control-flow-using-if"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=1497s">00:24:57</a> Control flow using if</h3>
<ul>
  <li>Add logic to programs, and decide which line of code is executed next</li>
  <li>Code is normally executed line-by-line</li>
  <li>Actions are performed &amp; control flow can be changed
    <ul>
      <li><code class="language-plaintext highlighter-rouge">if</code></li>
      <li><code class="language-plaintext highlighter-rouge">else</code></li>
      <li><code class="language-plaintext highlighter-rouge">else if</code></li>
    </ul>
  </li>
</ul>

<div class="row">
    <div class="col-sm">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/rust/simple-flow.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
    <div class="col-sm">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/rust/if-flow.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>

<p>Simple if else</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">99</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"big number"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"small number"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nested if else</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">201</span><span class="p">;</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">99</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">200</span> <span class="p">{</span>
		<span class="nd">println!</span><span class="p">(</span><span class="s">"huge number"</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nd">println!</span><span class="p">(</span><span class="s">"big number"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"small number"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nested else if are like ‚Äúor checks‚Äù</p>
<ul>
  <li>Important to check larger first, otherwise the condition will exit early!</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">200</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"huge number"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">99</span> <span class="p">{</span>        
        <span class="nd">println!</span><span class="p">(</span><span class="s">"number number"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"small number"</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Always include <code class="language-plaintext highlighter-rouge">else</code> statements, unless there are truly no alternative cases</p>

<hr />

<h3 id="003338-repetition-using-loops"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=2018s">00:33:38</a> Repetition using loops</h3>
<ul>
  <li>Called ‚Äúlooping‚Äù or ‚Äúiteration‚Äù</li>
  <li>Multiple types of loops in Rust, these are invoked via their keywords:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">loop</code> - infinite loop</li>
      <li><code class="language-plaintext highlighter-rouge">while</code> - conditional loop</li>
    </ul>
  </li>
  <li>Both loops can exit using <code class="language-plaintext highlighter-rouge">break</code></li>
</ul>

<h4 id="loop">Loop</h4>
<div class="row">
    <div class="col-sm">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/rust/loop.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="k">mut</span> <span class="n">example</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">example</span> <span class="o">==</span> <span class="mi">5</span><span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{example:?}"</span><span class="p">);</span>
        <span class="n">example</span> <span class="o">=</span> <span class="n">example</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="while-loop">While loop</h4>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="k">mut</span> <span class="n">example</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="n">example</span> <span class="o">!=</span> <span class="mi">5</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{example:?}"</span><span class="p">);</span>
        <span class="n">example</span> <span class="o">=</span> <span class="n">example</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="004012-tool-installation"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=2412s">00:40:12</a> Tool Installation</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">rustup</code> manages Rust installation, including all elements of the toolchain</li>
  <li>To install on Linux (Arch):
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yay <span class="nt">-S</span> rustup <span class="o">&amp;&amp;</span> <span class="se">\</span>
rustup toolchain <span class="nb">install </span>stable
</code></pre></div>    </div>
  </li>
  <li>Creating, building, and running a hello-world Rust project
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo init hello-world <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">cd </span>hello-world <span class="o">&amp;&amp;</span> <span class="se">\</span>
cargo build <span class="o">&amp;&amp;</span> <span class="se">\</span>
cargo run <span class="nt">-q</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h3 id="004503-comments"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=2703s">00:45:03</a> Comments</h3>
<ul>
  <li>Comments are made using <code class="language-plaintext highlighter-rouge">//</code> or <code class="language-plaintext highlighter-rouge">/* */</code></li>
  <li>Make sure that they are informative, not unnecessary</li>
</ul>

<hr />

<h3 id="004842-exercise---functions"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=2922s">00:48:42</a> Exercise - Functions</h3>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Functions</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Displays your first and last name</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a function to display your first name</span>
<span class="c1">// * Use a function to display your last name</span>
<span class="c1">// * Use the println macro to display messages to the terminal</span>

<span class="k">fn</span> <span class="nf">first_name</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Sam"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">last_name</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Bilbow"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">first_name</span><span class="p">();</span>
    <span class="nf">last_name</span><span class="p">();</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ cargo run <span class="nt">-q</span> <span class="nt">--bin</span> a1
Sam
Bilbow
</code></pre></div></div>

<hr />

<h3 id="005554-basic-arithmetic"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=3354s">00:55:54</a> Basic Arithmetic</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">sub</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span> <span class="p">{</span>
	<span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">5</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">division</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
	<span class="k">let</span> <span class="n">mult</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span><span class="p">;</span>

	<span class="k">let</span> <span class="n">five</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
	<span class="nd">println!</span><span class="p">(</span><span class="s">"{five:?}, {sum} {value} {division} {mult}"</span><span class="p">);</span>


	<span class="k">let</span> <span class="n">rem</span> <span class="o">=</span> <span class="mi">6</span> <span class="o">%</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 0 remainder division (modulo)</span>
	<span class="k">let</span> <span class="n">rem2</span> <span class="o">=</span> <span class="mi">6</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// 1 (useful for even / odd ) e.g. if x % 2 !== 0 means odd</span>
	<span class="n">rem2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="005933-exercise---arithmetic"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=3573s">00:59:33</a> Exercise - Arithmetic</h3>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Basic arithmetic</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Displays the result of the sum of two numbers</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a function to add two numbers together</span>
<span class="c1">// * Use a function to display the result</span>
<span class="c1">// * Use the "{:?}" token in the println macro to display the result</span>

<span class="k">fn</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i32</span><span class="p">{</span>
    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">46</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{x:?}"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ cargo run <span class="nt">-q</span> <span class="nt">--bin</span> a2
69
</code></pre></div></div>

<hr />

<h3 id="10504-control-flow-if-and-else"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=3904s">1:05:04</a> Control Flow if and else</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
    <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">21</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"ok to purchase"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"cannot purchase"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="10740-exercise---3a-control-flow-with-if--else"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=4060s">1:07:40</a> Exercise - 3a Control flow with if &amp; else</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Flow control using if..else</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Displays a message based on the value of a boolean variable</span>
<span class="c1">// * When the variable is set to true, display "hello"</span>
<span class="c1">// * When the variable is set to false, display "goodbye"</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a variable set to either true or false</span>
<span class="c1">// * Use an if..else block to determine which message to display</span>
<span class="c1">// * Use the println macro to display messages to the terminal</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">var</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">:</span> <span class="nb">bool</span><span class="p">){</span>
    <span class="k">if</span> <span class="n">var</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"hello"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"goodbye"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h3 id="11145-exercise---3b-control-flow-with-if--else"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=4305s">1:11:45</a> Exercise - 3b Control flow with if &amp; else</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Flow control using if..else if..else</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Display "&gt;5", "&lt;5", or "=5" based on the value of a variable</span>
<span class="c1">//   is &gt; 5, &lt; 5, or == 5, respectively</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a variable set to any integer value</span>
<span class="c1">// * Use an if..else if..else block to determine which message to display</span>
<span class="c1">// * Use the println macro to display messages to the terminal</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">var</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="nf">print_result</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="nf">print_result</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="nf">print_result</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">print_result</span><span class="p">(</span><span class="n">var</span><span class="p">:</span> <span class="nb">i32</span><span class="p">){</span>
    <span class="k">if</span> <span class="n">var</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{var} is greater than 5"</span><span class="p">);</span>
    <span class="p">}</span> 
    <span class="k">else</span> <span class="k">if</span> <span class="n">var</span> <span class="o">==</span> <span class="mi">5</span><span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{var} is equal to 5"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{var} is less than 5"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="11700-match"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=4620s">1:17:00</a> Match</h3>
<ul>
  <li>Match expressions are similar to if else, and are used to add logic to the program</li>
  <li>They are exhaustive, meaning all options <strong>must</strong> be accounted for.</li>
  <li>Within the body of the <code class="language-plaintext highlighter-rouge">match</code> expression, you must list all accountable options.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">=&gt;</code> denotes the action performed based on the expression matched.</li>
      <li><code class="language-plaintext highlighter-rouge">,</code> conditions are comma separated (match works on expressions <strong>not</strong> statements)</li>
    </ul>
  </li>
</ul>

<p>Example with boolean value</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">some_bool</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">match</span> <span class="n">some_bool</span> <span class="p">{</span>
        <span class="k">true</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"its true"</span><span class="p">),</span>
        <span class="k">false</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"its false"</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Example with integer</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">_</code> underscore denotes ‚Äúeverything else‚Äù
    <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="n">some_int</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">match</span> <span class="n">some_int</span> <span class="p">{</span>
      <span class="mi">1</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"its 1"</span><span class="p">),</span>
      <span class="mi">2</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"its 2"</span><span class="p">),</span>
      <span class="mi">3</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"its 3"</span><span class="p">),</span>
      <span class="n">_</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"its something else: {some_int}"</span><span class="p">),</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">match</code> compared to <code class="language-plaintext highlighter-rouge">else..if</code></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">match</code> will be checked by the compiler
    <ul>
      <li>compiler tells you if options are accounted for or not</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">else..if</code> is not checked by the compiler
    <ul>
      <li>compiler will not tell you if another option is added but not accounted for</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">match</code> leads to more robust code in these cases</li>
</ul>

<hr />

<h3 id="12128-making-decisions-with-match"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=4888s">1:21:28</a> Making decisions with match</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">match</code> helps you make decisions in the code, about where it should go next</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">my_name</span> <span class="o">=</span> <span class="s">"Bob"</span><span class="p">;</span>
    <span class="k">match</span> <span class="n">my_name</span> <span class="p">{</span>
        <span class="s">"Sam"</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"that is my name"</span><span class="p">),</span>
        <span class="s">"Jayson"</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"that is his name"</span><span class="p">),</span>
        <span class="s">"Bob"</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"not my name"</span><span class="p">),</span>
        <span class="n">_</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"nice to meet you"</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h3 id="12442-exercise---4a-basic-match-expressions"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=5082s">1:24:42</a> Exercise - 4a Basic Match expressions</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Decision making with match</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Display "it's true" or "it's false" based on the value of a variable</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a variable set to either true or false</span>
<span class="c1">// * Use a match expression to determine which message to display</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">var</span> <span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">:</span> <span class="nb">bool</span><span class="p">){</span>
    <span class="k">match</span> <span class="n">var</span> <span class="p">{</span>
        <span class="k">true</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"it's true"</span><span class="p">),</span>
        <span class="k">false</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"it's false"</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h3 id="12849-exercise---4b-basic-match-expressions"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=5329s">1:28:49</a> Exercise - 4b Basic Match expressions</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Decision making with match</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Display "one", "two", "three", or "other" based on whether</span>
<span class="c1">//   the value of a variable is 1, 2, 3, or some other number,</span>
<span class="c1">//   respectively</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a variable set to any integer</span>
<span class="c1">// * Use a match expression to determine which message to display</span>
<span class="c1">// * Use an underscore (_) to match on any value</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">var</span> <span class="p">:</span> <span class="nb">i32</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">);</span>

<span class="p">}</span>

<span class="k">fn</span> <span class="nf">eval</span><span class="p">(</span><span class="n">var</span><span class="p">:</span> <span class="nb">i32</span><span class="p">){</span>
    <span class="k">match</span> <span class="n">var</span> <span class="p">{</span>
        <span class="mi">1</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"one"</span><span class="p">),</span>
        <span class="mi">2</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"two"</span><span class="p">),</span>
        <span class="mi">3</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"three"</span><span class="p">),</span>
        <span class="n">_</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"other"</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="13403-repetition-using-loop"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=5643s">1:34:03</a> Repetition using loop</h3>
<ul>
  <li>Good for repeating things</li>
  <li>Repeats forever until broken out of</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">countdown</span><span class="p">:</span> <span class="nb">i32</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{countdown}"</span><span class="p">);</span>
        <span class="n">countdown</span> <span class="o">=</span> <span class="n">countdown</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="n">countdown</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"GO!"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ cargo run <span class="nt">-q</span> <span class="nt">--bin</span> main
3
2
1
GO!
</code></pre></div></div>

<hr />

<h3 id="13854-exercise---repetition-using-loop"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=5934s">1:38:54</a> Exercise - Repetition using loop</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Looping using the loop statement</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Display "1" through "4" in the terminal</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a mutable integer variable</span>
<span class="c1">// * Use a loop statement</span>
<span class="c1">// * Print the variable within the loop statement</span>
<span class="c1">// * Use break to exit the loop</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span><span class="p">:</span> <span class="nb">i32</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{i}"</span><span class="p">);</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ cargo run <span class="nt">-q</span> <span class="nt">--bin</span> a5
1
2
3
4
</code></pre></div></div>

<hr />

<!-- ### [1:43:55](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=6235s) Demo - Repetition using while -->

<!-- --- -->

<h3 id="14722-exercise---repetition-using-while"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=6442s">1:47:22</a> Exercise - Repetition using while</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Looping using the while statement</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Counts down from 5 to 1, displays the countdown</span>
<span class="c1">//   in the terminal, then prints "done!" when complete.</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a mutable integer variable</span>
<span class="c1">// * Use a while statement</span>
<span class="c1">// * Print the variable within the while loop</span>
<span class="c1">// * Do not use break to exit the loop</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">!=</span><span class="mi">0</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{i}"</span><span class="p">);</span>
        <span class="n">i</span><span class="o">-=</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"done!"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="15210-lecture---enum"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=6730s">1:52:10</a> Lecture - Enum</h3>
<ul>
  <li>Working with data in a type safe manner</li>
  <li>A piece of data that can be one of multiple different possiblities
    <ul>
      <li>Each possiblity is called a ‚Äúvariant‚Äù</li>
    </ul>
  </li>
  <li>Provides information about your program to the compiler
    <ul>
      <li>Results in more robust programmes</li>
    </ul>
  </li>
  <li>Outside of <code class="language-plaintext highlighter-rouge">fn main()</code></li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">enum</span> <span class="n">Direction</span> <span class="p">{</span>
	<span class="n">Up</span><span class="p">,</span>
	<span class="n">Down</span><span class="p">,</span>
	<span class="n">Left</span><span class="p">,</span>
	<span class="n">Right</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">which_way</span><span class="p">(</span><span class="n">go</span><span class="p">:</span> <span class="n">Direction</span><span class="p">){</span>
    <span class="k">match</span> <span class="n">go</span> <span class="p">{</span>
        <span class="nn">Direction</span><span class="p">::</span><span class="n">Up</span> <span class="k">=&gt;</span> <span class="s">"up"</span><span class="p">,</span>
        <span class="nn">Direction</span><span class="p">::</span><span class="n">Down</span> <span class="k">=&gt;</span> <span class="s">"down"</span><span class="p">,</span>
        <span class="nn">Direction</span><span class="p">::</span><span class="n">Left</span> <span class="k">=&gt;</span> <span class="s">"left"</span><span class="p">,</span>
        <span class="nn">Direction</span><span class="p">::</span><span class="n">Right</span> <span class="k">=&gt;</span> <span class="s">"right"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Direction</code> can be any one of four different variants.</li>
  <li>Using <code class="language-plaintext highlighter-rouge">match</code>, use the syntax <code class="language-plaintext highlighter-rouge">enum::variant =&gt; "action",</code></li>
</ul>

<hr />

<h3 id="15523-demo---enum"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=6923s">1:55:23</a> Demo - Enum</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Direction</span> <span class="p">{</span>
    <span class="n">Left</span><span class="p">,</span>
    <span class="n">Right</span><span class="p">,</span>
    <span class="n">Up</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">go</span> <span class="o">=</span> <span class="nn">Direction</span><span class="p">::</span><span class="n">Left</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">go</span><span class="p">);</span>
    <span class="n">go</span> <span class="o">=</span> <span class="nn">Direction</span><span class="p">::</span><span class="n">Right</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">go</span><span class="p">);</span>
    <span class="n">go</span> <span class="o">=</span> <span class="nn">Direction</span><span class="p">::</span><span class="n">Up</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">go</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">eval</span><span class="p">(</span><span class="n">go</span><span class="p">:</span> <span class="n">Direction</span><span class="p">){</span>
    <span class="k">match</span> <span class="n">go</span> <span class="p">{</span>
        <span class="nn">Direction</span><span class="p">::</span><span class="n">Left</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"we're going left!"</span><span class="p">),</span>
        <span class="nn">Direction</span><span class="p">::</span><span class="n">Right</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"we're going right!"</span><span class="p">),</span>
        <span class="n">_</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"we're going another direction!"</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="15910-exercise-enum"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=7150s">1:59:10</a> Exercise Enum</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Working with an enum</span>
<span class="c1">//</span>
<span class="c1">// Program requirements:</span>
<span class="c1">// * Prints the name of a color to the terminal</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use an enum with color names as variants</span>
<span class="c1">// * Use a function to print the color name</span>
<span class="c1">// * The function must use the enum as a parameter</span>
<span class="c1">// * Use a match expression to determine which color</span>
<span class="c1">//   name to print</span>

<span class="k">enum</span> <span class="n">Color</span><span class="p">{</span>
    <span class="n">Red</span><span class="p">,</span>
    <span class="n">Yellow</span><span class="p">,</span>
    <span class="n">Blue</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">print_color</span><span class="p">(</span><span class="n">color</span><span class="p">:</span> <span class="n">Color</span><span class="p">){</span>
    <span class="k">match</span> <span class="n">color</span><span class="p">{</span>
        <span class="nn">Color</span><span class="p">::</span><span class="n">Red</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">{</span><span class="s">"The color is blood red"</span><span class="p">},</span>
        <span class="nn">Color</span><span class="p">::</span><span class="n">Yellow</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">{</span><span class="s">"The color is a golden yellow"</span><span class="p">},</span>
        <span class="nn">Color</span><span class="p">::</span><span class="n">Blue</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">{</span><span class="s">"The color is a rich blue"</span><span class="p">},</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">color</span> <span class="o">=</span> <span class="nn">Color</span><span class="p">::</span><span class="n">Red</span><span class="p">;</span>
    <span class="nf">print_color</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
    <span class="n">color</span> <span class="o">=</span> <span class="nn">Color</span><span class="p">::</span><span class="n">Yellow</span><span class="p">;</span>
    <span class="nf">print_color</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
    <span class="n">color</span> <span class="o">=</span> <span class="nn">Color</span><span class="p">::</span><span class="n">Blue</span><span class="p">;</span>
    <span class="nf">print_color</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="20523-lecture---struct"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=7523s">2:05:23</a> Lecture - Struct</h3>
<ul>
  <li>Short for structure</li>
  <li>I guess they‚Äôre kind of like objects that you can instantiate?</li>
  <li>Data type that contains multiple pieces of data
    <ul>
      <li>All or nothing - cannot have some pieces of data and not others</li>
      <li>No part of a structure and not others</li>
    </ul>
  </li>
  <li>Each piece of data is called a ‚Äòfield‚Äô</li>
  <li>Makes working with data easier
    <ul>
      <li>Similar data can be grouped together</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">struct</code> fields are in its body, and are comma separated, and have types.</li>
  <li>Fields can be accessed by using <code class="language-plaintext highlighter-rouge">.</code> on an instanced structure</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">CourierBox</span> <span class="p">{</span>
    <span class="n">weight</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
    <span class="n">depth</span><span class="p">:</span>  <span class="nb">i32</span><span class="p">,</span>
    <span class="n">width</span><span class="p">:</span>  <span class="nb">i32</span><span class="p">,</span>
    <span class="n">height</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">let</span> <span class="n">new_courier_box</span> <span class="o">=</span> <span class="n">CourierBox</span><span class="p">{</span>
        <span class="n">weight</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="n">depth</span><span class="p">:</span>  <span class="mi">432</span><span class="p">,</span>
        <span class="n">width</span><span class="p">:</span>  <span class="mi">291</span><span class="p">,</span> 
        <span class="n">height</span><span class="p">:</span> <span class="mi">921</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="k">let</span> <span class="n">weight</span> <span class="o">=</span> <span class="n">new_courier_box</span><span class="py">.weight</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">depth</span> <span class="o">=</span> <span class="n">new_courier_box</span><span class="py">.depth</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">width</span> <span class="o">=</span> <span class="n">new_courier_box</span><span class="py">.width</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="n">new_courier_box</span><span class="py">.height</span><span class="p">;</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"your box is {weight}kg"</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"your box is {depth}mm deep"</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"your box is {width}mm wide"</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"your box is {height}mm tall"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="20813-demo---struct"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=7693s">2:08:13</a> Demo - Struct</h3>
<ul>
  <li>When matching <code class="language-plaintext highlighter-rouge">enums</code>, be careful not to try and print them! They are not strings.</li>
</ul>

<hr />

<h3 id="21107-exercise---struct"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=7867s">2:11:07</a> Exercise - Struct</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Organizing similar data using structs</span>
<span class="c1">//</span>
<span class="c1">// Requirements:</span>
<span class="c1">// * Print the flavor of a drink and it's fluid ounces</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use an enum to create different flavors of drinks</span>
<span class="c1">// * Use a struct to store drink flavor and fluid ounce information</span>
<span class="c1">// * Use a function to print out the drink flavor and ounces</span>
<span class="c1">// * Use a match expression to print the drink flavor</span>

<span class="k">enum</span> <span class="n">Flavours</span><span class="p">{</span>
    <span class="n">Apple</span><span class="p">,</span>
    <span class="n">Orange</span><span class="p">,</span>
    <span class="n">Lychee</span><span class="p">,</span>
    <span class="n">Mango</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Drink</span><span class="p">{</span>
    <span class="n">flavour</span><span class="p">:</span> <span class="n">Flavours</span><span class="p">,</span>
    <span class="n">volume</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">apple_juice_from_concentrate</span><span class="p">:</span> <span class="n">Drink</span> <span class="o">=</span> <span class="n">Drink</span><span class="p">{</span>
        <span class="n">flavour</span><span class="p">:</span> <span class="nn">Flavours</span><span class="p">::</span><span class="n">Apple</span><span class="p">,</span>
        <span class="n">volume</span><span class="p">:</span> <span class="mi">330</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="nf">print_flavour</span><span class="p">(</span><span class="n">apple_juice_from_concentrate</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">fresh_orange_juice</span><span class="p">:</span> <span class="n">Drink</span> <span class="o">=</span> <span class="n">Drink</span><span class="p">{</span>
        <span class="n">flavour</span><span class="p">:</span> <span class="nn">Flavours</span><span class="p">::</span><span class="n">Orange</span><span class="p">,</span>
        <span class="n">volume</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="nf">print_flavour</span><span class="p">(</span><span class="n">fresh_orange_juice</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">lychee_flavoured_water</span><span class="p">:</span> <span class="n">Drink</span> <span class="o">=</span> <span class="n">Drink</span><span class="p">{</span>
        <span class="n">flavour</span><span class="p">:</span> <span class="nn">Flavours</span><span class="p">::</span><span class="n">Lychee</span><span class="p">,</span>
        <span class="n">volume</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="nf">print_flavour</span><span class="p">(</span><span class="n">lychee_flavoured_water</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">mango_nectar</span><span class="p">:</span> <span class="n">Drink</span> <span class="o">=</span> <span class="n">Drink</span><span class="p">{</span>
        <span class="n">flavour</span><span class="p">:</span> <span class="nn">Flavours</span><span class="p">::</span><span class="n">Mango</span><span class="p">,</span>
        <span class="n">volume</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="nf">print_flavour</span><span class="p">(</span><span class="n">mango_nectar</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">print_flavour</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="n">Drink</span><span class="p">){</span>
    <span class="k">match</span> <span class="n">drink</span><span class="py">.flavour</span><span class="p">{</span>
        <span class="nn">Flavours</span><span class="p">::</span><span class="n">Apple</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"The drink you've chosen has an apple flavour, and contains {}ml of liquid."</span><span class="p">,</span> <span class="n">drink</span><span class="py">.volume</span><span class="p">),</span>
        <span class="nn">Flavours</span><span class="p">::</span><span class="n">Orange</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"The drink you've chosen has an orange flavour, and contains {}ml of liquid."</span><span class="p">,</span> <span class="n">drink</span><span class="py">.volume</span><span class="p">),</span>
        <span class="nn">Flavours</span><span class="p">::</span><span class="n">Lychee</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"The drink you've chosen has a lychee flavour, and contains {}ml of liquid."</span><span class="p">,</span> <span class="n">drink</span><span class="py">.volume</span><span class="p">),</span>
        <span class="nn">Flavours</span><span class="p">::</span><span class="n">Mango</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"The drink you've chosen has a mango flavour, and contains {}ml of liquid."</span><span class="p">,</span> <span class="n">drink</span><span class="py">.volume</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="22038-lecture---tuple"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=8438s">2:20:38</a> Lecture - Tuple</h3>
<ul>
  <li>A type of ‚Äòrecord‚Äô
    <ul>
      <li>A line of information on a piece of paper</li>
    </ul>
  </li>
  <li>A way to access each piece of data in that record</li>
  <li>Store data anonymously
    <ul>
      <li>No need to name fields like in an enum variant or struct field</li>
    </ul>
  </li>
  <li>Useful to return pairs of data fom functions</li>
  <li>Can be destructured easily into variables</li>
  <li>Tuples are surrounded in parentheses and are comma separated.</li>
  <li>Tuple values are accessed using <code class="language-plaintext highlighter-rouge">.x</code> where <code class="language-plaintext highlighter-rouge">x</code> is the value index starting from 0</li>
  <li>Alternatively they can be assigned to a new tuple variable and accessed by name:</li>
</ul>

<div class="row">
    <div class="col-sm">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/rust/tuples.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>

<hr />

<h3 id="22412-demo---tuples"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=8652s">2:24:12</a> Demo - Tuples</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Enumeration containing variants based on type of access</span>
<span class="k">enum</span> <span class="n">Access</span> <span class="p">{</span>
    <span class="n">Full</span><span class="p">,</span>
    <span class="n">Partial</span><span class="p">,</span>
    <span class="n">Guest</span>
<span class="p">}</span>

<span class="c1">// Structured data containing member information</span>
<span class="k">struct</span> <span class="n">NewMember</span><span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">age</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
    <span class="n">species</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">access</span><span class="p">:</span> <span class="n">Access</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// Function that creates a vector containing members, defines new members, and prints those members using a for loop that features match and tuple.</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">member_list</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">let</span> <span class="n">celine</span> <span class="o">=</span> <span class="n">NewMember</span><span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Celine"</span><span class="p">),</span>
        <span class="n">age</span><span class="p">:</span> <span class="mi">94</span><span class="p">,</span>
        <span class="n">species</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Octopus"</span><span class="p">),</span>
        <span class="n">access</span><span class="p">:</span> <span class="nn">Access</span><span class="p">::</span><span class="n">Full</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">member_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">celine</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">otto</span> <span class="o">=</span> <span class="n">NewMember</span><span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Otto"</span><span class="p">),</span>
        <span class="n">age</span><span class="p">:</span> <span class="mi">83</span><span class="p">,</span>
        <span class="n">species</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Octopus"</span><span class="p">),</span>
        <span class="n">access</span><span class="p">:</span> <span class="nn">Access</span><span class="p">::</span><span class="n">Partial</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">member_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">otto</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">diane</span> <span class="o">=</span> <span class="n">NewMember</span><span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Diane"</span><span class="p">),</span>
        <span class="n">age</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="n">species</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Cat"</span><span class="p">),</span>
        <span class="n">access</span><span class="p">:</span> <span class="nn">Access</span><span class="p">::</span><span class="n">Guest</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">member_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">diane</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">george</span> <span class="o">=</span> <span class="n">NewMember</span><span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"George"</span><span class="p">),</span>
        <span class="n">age</span><span class="p">:</span> <span class="mi">62</span><span class="p">,</span>
        <span class="n">species</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Panda"</span><span class="p">),</span>
        <span class="n">access</span><span class="p">:</span> <span class="nn">Access</span><span class="p">::</span><span class="n">Guest</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">member_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">george</span><span class="p">);</span>

    <span class="nd">println!</span><span class="p">(</span><span class="s">"List of Socialist Revolutionaries:"</span><span class="p">);</span>
    
    <span class="k">for</span> <span class="n">member</span> <span class="k">in</span> <span class="n">member_list</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">access_str</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">;</span>
        <span class="k">match</span> <span class="n">member</span><span class="py">.access</span> <span class="p">{</span>
            <span class="nn">Access</span><span class="p">::</span><span class="n">Full</span> <span class="k">=&gt;</span> <span class="n">access_str</span> <span class="o">=</span> <span class="s">"full"</span><span class="p">,</span>
            <span class="nn">Access</span><span class="p">::</span><span class="n">Partial</span> <span class="k">=&gt;</span> <span class="n">access_str</span> <span class="o">=</span> <span class="s">"partial"</span><span class="p">,</span>
            <span class="nn">Access</span><span class="p">::</span><span class="n">Guest</span> <span class="k">=&gt;</span> <span class="n">access_str</span> <span class="o">=</span> <span class="s">"guest"</span><span class="p">,</span>
        <span class="p">};</span>
        <span class="k">let</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">species</span><span class="p">,</span> <span class="n">access</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">member</span><span class="py">.name</span><span class="p">,</span> <span class="n">member</span><span class="py">.age</span><span class="p">,</span><span class="n">member</span><span class="py">.species</span><span class="p">,</span> <span class="n">access_str</span><span class="p">);</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"Staff member {0} ({1}), is {2}, and has {3} access."</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">species</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">access</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ cargo run <span class="nt">-q</span> <span class="nt">--bin</span> main
List of Socialist Revolutionaries:
Staff member Celine <span class="o">(</span>Octopus<span class="o">)</span>, is 94, and has full access.
Staff member Otto <span class="o">(</span>Octopus<span class="o">)</span>, is 83, and has partial access.
Staff member Diane <span class="o">(</span>Cat<span class="o">)</span>, is 2, and has guest access.
Staff member George <span class="o">(</span>Panda<span class="o">)</span>, is 2, and has guest access.
</code></pre></div></div>

<hr />

<h3 id="23005-exercise---tuples"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=9005s">2:30:05</a> Exercise - Tuples</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Data management using tuples</span>
<span class="c1">//</span>
<span class="c1">// Requirements:</span>
<span class="c1">// * Print whether the y-value of a cartesian coordinate is</span>
<span class="c1">//   greater than 5, less than 5, or equal to 5</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a function that returns a tuple</span>
<span class="c1">// * Destructure the return value into two variables</span>
<span class="c1">// * Use an if..else if..else block to determine what to print</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="nf">tuplizer</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
    <span class="nf">print_y_value</span><span class="p">(</span><span class="n">coordinates</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">tuplizer</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">i32</span><span class="p">){</span>
    <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">print_y_value</span><span class="p">(</span><span class="n">coordinates</span><span class="p">:</span> <span class="p">(</span><span class="nb">i32</span><span class="p">,</span> <span class="nb">i32</span><span class="p">)){</span>
    <span class="k">let</span> <span class="p">(</span><span class="n">_x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">coordinates</span><span class="na">.0</span><span class="p">,</span> <span class="n">coordinates</span><span class="na">.1</span><span class="p">);</span>
    <span class="k">if</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"The y coordinate: {y} is greater than 5"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"The y coordinate: {y} is less than 5"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"The y coordinate: {y} is equal to 5"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ cargo run <span class="nt">-q</span> <span class="nt">--bin</span> a9
The y coordinate: 2 is less than 5
</code></pre></div></div>

<hr />

<h3 id="23601-lecture---expressions"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=9361s">2:36:01</a> Lecture - Expressions</h3>
<ul>
  <li>Rust is an expression-based language
    <ul>
      <li>Most things are evaluated and return some value</li>
    </ul>
  </li>
  <li>Expression values coalesce to a single point
    <ul>
      <li>As a result expressions can be used for nesting logic</li>
    </ul>
  </li>
  <li>Assigning condition outputs to variables:</li>
  <li>Good way of compressing LoC</li>
  <li>Best not to use more than two or three nests</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">is_x_5</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">5</span><span class="p">{</span>
        <span class="k">true</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">false</span>
    <span class="p">};</span>
    
    <span class="k">let</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">is_y_5</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="23953-demo---expressions"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=9593s">2:39:53</a> Demo - Expressions</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Access</span> <span class="p">{</span>
    <span class="n">Admin</span><span class="p">,</span>
    <span class="n">Manager</span><span class="p">,</span>
    <span class="n">User</span><span class="p">,</span>
    <span class="n">Guest</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">access_level</span><span class="p">:</span> <span class="n">Access</span> <span class="o">=</span> <span class="nn">Access</span><span class="p">::</span><span class="n">Guest</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">can_access_file</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="k">match</span> <span class="n">access_level</span> <span class="p">{</span>
        <span class="nn">Access</span><span class="p">::</span><span class="n">Admin</span> <span class="k">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">_</span> <span class="k">=&gt;</span> <span class="k">false</span>
    <span class="p">};</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"can access? {can_access_file}"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="24505-exercise---expressions"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=9905s">2:45:05</a> Exercise - Expressions</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Working with expressions</span>
<span class="c1">//</span>
<span class="c1">// Requirements:</span>
<span class="c1">// * Print "its big" if a variable is &gt; 100</span>
<span class="c1">// * Print "its small" if a variable is &lt;= 100</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a boolean variable set to the result of</span>
<span class="c1">//   an if..else expression to store whether the value</span>
<span class="c1">//   is &gt; 100 or &lt;= 100</span>
<span class="c1">// * Use a function to print the messages</span>
<span class="c1">// * Use a match expression to determine which message</span>
<span class="c1">//   to print</span>

<span class="k">fn</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">var</span><span class="p">:</span> <span class="nb">i32</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">var_gt_100</span> <span class="o">=</span> <span class="n">var</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">;</span>
    <span class="nf">eval</span><span class="p">(</span><span class="n">var_gt_100</span><span class="p">);</span>

<span class="p">}</span>

<span class="k">fn</span> <span class="nf">eval</span> <span class="p">(</span><span class="n">var_gt_100</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">match</span> <span class="n">var_gt_100</span><span class="p">{</span>
        <span class="k">true</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{var_gt_100}, it is bigger than 100"</span><span class="p">)</span> <span class="p">,</span>
        <span class="k">false</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{var_gt_100}, it is less than or equal to 100"</span><span class="p">)</span> <span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="25218-lecture---memory-intermediate"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=10338s">2:52:18</a> Lecture - Memory Intermediate</h3>
<ul>
  <li>Memory is stored using binary
    <ul>
      <li>Bits: 0 or 1</li>
      <li>Smallest data type</li>
    </ul>
  </li>
  <li>Computer optimized for bytes
    <ul>
      <li>1 byte == 8 contiguous bits</li>
    </ul>
  </li>
  <li>Memory can be thought of a fully contiguous string of bits</li>
</ul>

<h4 id="addresses">Addresses</h4>
<ul>
  <li>All data in memory has an address
    <ul>
      <li>This is used to locate data</li>
      <li>They are always the same, only the data changes</li>
    </ul>
  </li>
  <li>We don‚Äôt usually utilize addresses directly
    <ul>
      <li>Variables do most of this hard work</li>
    </ul>
  </li>
</ul>

<h4 id="offsets">Offsets</h4>
<ul>
  <li>Items can be located at an address using an ‚Äúoffset‚Äù</li>
  <li>Offsets begin at 0</li>
  <li>This represents the number of bytes away from the original addresses
    <ul>
      <li>Normally we don‚Äôt deal with offsets, we deal with indexes, and the compiler calculates the offset from this.</li>
    </ul>
  </li>
</ul>

<div class="row">
    <div class="col-sm">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/rust/addresses.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>

<hr />

<h3 id="25555-lecture--ownership"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=10555s">2:55:55</a> Lecture- Ownership</h3>
<ul>
  <li>Ownership allows performant compilation</li>
  <li>All programs must track their memory usage
    <ul>
      <li>Otherwise you get leaks where new memory keeps getting allocated! üö∞</li>
    </ul>
  </li>
  <li>Rust utilises an ownership model to manage memory
    <ul>
      <li>The ‚Äúowner‚Äù of the memory is responsible for clearing up memory when it is no longer needed</li>
      <li>This automatically occurs at the end of the scope</li>
      <li>The owner is the function in which the variable is declared.</li>
    </ul>
  </li>
  <li>Memory can either be moved or borrowed.</li>
</ul>

<h4 id="moving">Moving</h4>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Light</span> <span class="p">{</span>
    <span class="n">Bright</span><span class="p">,</span>
    <span class="n">Dull</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">display_light</span><span class="p">(</span><span class="n">light</span><span class="p">:</span> <span class="n">Light</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">match</span> <span class="n">light</span> <span class="p">{</span>
        <span class="nn">Light</span><span class="p">::</span><span class="n">Bright</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"light!"</span><span class="p">),</span>
        <span class="nn">Light</span><span class="p">::</span> <span class="n">Dull</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"dull"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">dull</span> <span class="o">=</span> <span class="nn">Light</span><span class="p">::</span><span class="n">Dull</span><span class="p">;</span> <span class="c1">// dull is owned by main()</span>
    <span class="nf">display_light</span><span class="p">(</span><span class="n">dull</span><span class="p">);</span> <span class="c1">// dull is now owned by display_light()</span>
    <span class="nf">display_light</span><span class="p">(</span><span class="n">dull</span><span class="p">);</span> <span class="c1">// Error here, as dull's ownership has moved to display_light(), and dull doesn't exist within the scope of this function anymore.</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="borrowing">Borrowing</h4>
<ul>
  <li>Borrowing or referencing data is denoted by using the ampersand <code class="language-plaintext highlighter-rouge">&amp;</code>, use on parameter type, e.g. (<code class="language-plaintext highlighter-rouge">int: &amp;i32</code>). Remember by ‚Äúborrowed type‚Äù</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Light</span> <span class="p">{</span>
    <span class="n">Bright</span><span class="p">,</span>
    <span class="n">Dull</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">display_light</span><span class="p">(</span><span class="n">light</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">Light</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">match</span> <span class="n">light</span> <span class="p">{</span>
        <span class="nn">Light</span><span class="p">::</span><span class="n">Bright</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"bright!"</span><span class="p">),</span>
        <span class="nn">Light</span><span class="p">::</span> <span class="n">Dull</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"dull"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">dull</span> <span class="o">=</span> <span class="nn">Light</span><span class="p">::</span><span class="n">Dull</span><span class="p">;</span> <span class="c1">// dull is owned by main()</span>
    <span class="nf">display_light</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dull</span><span class="p">);</span> <span class="c1">// dull is now borrowed by display_light()</span>
    <span class="nf">display_light</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dull</span><span class="p">);</span> <span class="c1">// main() still owns and can lend dull a second time.</span>
<span class="p">}</span> <span class="c1">// dull is unallocated now</span>
</code></pre></div></div>

<hr />

<h3 id="30216-demo---ownership"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=10936s">3:02:16</a> Demo - Ownership</h3>
<ul>
  <li>Cleaning memory is called a <code class="language-plaintext highlighter-rouge">drop</code></li>
  <li>Happens automatically once the end of the function comes (scope / block)</li>
</ul>

<hr />

<h3 id="30826-exercise---ownership"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=11306s">3:08:26</a> Exercise - Ownership</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Ownership</span>
<span class="c1">//</span>
<span class="c1">// Requirements:</span>
<span class="c1">// * Print out the quantity and id number of a grocery item</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a struct for the grocery item</span>
<span class="c1">// * Use two i32 fields for the quantity and id number</span>
<span class="c1">// * Create a function to display the quantity, with the struct as a parameter</span>
<span class="c1">// * Create a function to display the id number, with the struct as a parameter</span>

<span class="k">struct</span> <span class="n">GroceryItem</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">quantity</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
    <span class="n">id_number</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">let</span> <span class="k">mut</span> <span class="n">shopping_list</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[];</span>

    <span class="k">let</span> <span class="n">tofu</span> <span class="o">=</span> <span class="n">GroceryItem</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="s">"Tofu"</span><span class="nf">.to_string</span><span class="p">(),</span>
        <span class="n">quantity</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
        <span class="n">id_number</span><span class="p">:</span> <span class="mi">9348912</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">shopping_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">tofu</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">beansprouts</span> <span class="o">=</span> <span class="n">GroceryItem</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="s">"Beansprouts"</span><span class="nf">.to_string</span><span class="p">(),</span>
        <span class="n">quantity</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
        <span class="n">id_number</span><span class="p">:</span> <span class="mi">2342341</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">shopping_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">beansprouts</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">gochujang</span> <span class="o">=</span> <span class="n">GroceryItem</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="s">"Gochujang"</span><span class="nf">.to_string</span><span class="p">(),</span>
        <span class="n">quantity</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="n">id_number</span><span class="p">:</span> <span class="mi">4326116</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">shopping_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">gochujang</span><span class="p">);</span>
    
    <span class="k">let</span> <span class="n">peanut_butter</span> <span class="o">=</span> <span class="n">GroceryItem</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="s">"Peanut Butter"</span><span class="nf">.to_string</span><span class="p">(),</span>
        <span class="n">quantity</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="n">id_number</span><span class="p">:</span> <span class="mi">343946</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="n">shopping_list</span><span class="nf">.push</span><span class="p">(</span><span class="n">peanut_butter</span><span class="p">);</span>

    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">shopping_list</span> <span class="p">{</span>
        <span class="nf">display_information</span><span class="p">(</span><span class="o">&amp;</span><span class="n">item</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="k">fn</span> <span class="nf">display_information</span><span class="p">(</span><span class="n">grocery_item</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">GroceryItem</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">grocery_item</span><span class="py">.name</span><span class="nf">.to_string</span><span class="p">();</span>
    <span class="k">let</span> <span class="n">quantity</span> <span class="o">=</span> <span class="n">grocery_item</span><span class="py">.quantity</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">id_number</span> <span class="o">=</span> <span class="n">grocery_item</span><span class="py">.id_number</span><span class="p">;</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"There are {quantity} of item {id_number} ({name})"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="31326-demo---impl"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=11606s">3:13:26</a> Demo - Impl</h3>
<ul>
  <li>Allows you to implement functionality on <code class="language-plaintext highlighter-rouge">enum</code> and <code class="language-plaintext highlighter-rouge">Struct</code></li>
  <li>More organised code</li>
  <li><code class="language-plaintext highlighter-rouge">impl</code> keyword followed by the name of the <code class="language-plaintext highlighter-rouge">enum</code> or <code class="language-plaintext highlighter-rouge">Struct</code></li>
  <li>Place functions inside the scope</li>
  <li>Access with <code class="language-plaintext highlighter-rouge">Struct::Fn</code></li>
  <li>You can take a reference to self to make it more ‚Äòorganised‚Äô with <code class="language-plaintext highlighter-rouge">&amp;self</code>. Refers to itself as a <code class="language-plaintext highlighter-rouge">Struct</code> or <code class="language-plaintext highlighter-rouge">enum</code></li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Temperature</span> <span class="p">{</span>
    <span class="n">degrees_f</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">show_temp</span> <span class="p">(</span><span class="n">temp</span><span class="p">:</span> <span class="n">Temperature</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{:?} degrees F"</span><span class="p">,</span> <span class="n">temp</span><span class="py">.degrees_f</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">hot</span> <span class="o">=</span> <span class="n">Temperature</span> <span class="p">{</span> <span class="n">degrees_f</span><span class="p">:</span> <span class="mf">99.9</span> <span class="p">};</span>
    <span class="nf">show_temp</span><span class="p">(</span><span class="n">hot</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Tidied up</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Temperature</span> <span class="p">{</span>
    <span class="n">degrees_f</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Temperature</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">show_temp</span> <span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{:?} degrees F"</span><span class="p">,</span> <span class="k">self</span><span class="py">.degrees_f</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">hot</span> <span class="o">=</span> <span class="n">Temperature</span> <span class="p">{</span> <span class="n">degrees_f</span><span class="p">:</span> <span class="mf">99.9</span> <span class="p">};</span>
    <span class="n">hot</span><span class="nf">.show_temp</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Variables placed within the <code class="language-plaintext highlighter-rouge">impl</code> as Self (type) referring return functions</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Temperature</span> <span class="p">{</span>
    <span class="n">degrees_f</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Temperature</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">hot</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span> <span class="n">degrees_f</span><span class="p">:</span> <span class="mf">99.9</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">fn</span> <span class="nf">freezing</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span> <span class="n">degrees_f</span><span class="p">:</span> <span class="mf">32.0</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">fn</span> <span class="nf">boiling</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span> <span class="n">degrees_f</span><span class="p">:</span> <span class="mf">212.0</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">fn</span> <span class="nf">show_temp</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{:?} degrees F"</span><span class="p">,</span> <span class="k">self</span><span class="py">.degrees_f</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">hot</span><span class="p">()</span><span class="nf">.show_temp</span><span class="p">();</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">freezing</span><span class="p">()</span><span class="nf">.show_temp</span><span class="p">();</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">boiling</span><span class="p">()</span><span class="nf">.show_temp</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="32250-exercise---impl"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=12170s">3:22:50</a> Exercise - Impl</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Implementing functionality with the impl keyword</span>
<span class="c1">//</span>
<span class="c1">// Requirements:</span>
<span class="c1">// * Print the characteristics of a shipping box</span>
<span class="c1">// * Must include dimensions, weight, and color</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a struct to encapsulate the box characteristics</span>
<span class="c1">// * Use an enum for the box color</span>
<span class="c1">// * Implement functionality on the box struct to create a new box</span>
<span class="c1">// * Implement functionality on the box struct to print the characteristics</span>

<span class="k">enum</span> <span class="n">BoxColor</span><span class="p">{</span>
    <span class="n">Blue</span><span class="p">,</span>
    <span class="n">Yellow</span><span class="p">,</span>
    <span class="n">Red</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">ShippingBox</span> <span class="p">{</span>
    <span class="n">dimensions</span><span class="p">:</span> <span class="p">[</span><span class="nb">f32</span><span class="p">;</span><span class="mi">3</span><span class="p">],</span>
    <span class="n">weight</span><span class="p">:</span> <span class="nb">f32</span><span class="p">,</span>
    <span class="n">color</span><span class="p">:</span> <span class="n">BoxColor</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">ShippingBox</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">create</span><span class="p">(</span><span class="n">dimensions</span><span class="p">:</span> <span class="p">[</span><span class="nb">f32</span><span class="p">;</span><span class="mi">3</span><span class="p">],</span> <span class="n">weight</span><span class="p">:</span> <span class="nb">f32</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="n">BoxColor</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="k">Self</span> <span class="p">{</span> <span class="n">dimensions</span><span class="p">:</span> <span class="n">dimensions</span><span class="p">,</span> <span class="n">weight</span><span class="p">:</span> <span class="n">weight</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="n">color</span> <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">fn</span> <span class="nf">p_box</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">){</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"The box has the following characteristics"</span><span class="p">);</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"- It is {}mm wide"</span><span class="p">,</span> <span class="k">self</span><span class="py">.dimensions</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"- It is {}mm tall"</span><span class="p">,</span> <span class="k">self</span><span class="py">.dimensions</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"- It is {}mm deep"</span><span class="p">,</span> <span class="k">self</span><span class="py">.dimensions</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"- It is {}kg"</span><span class="p">,</span> <span class="k">self</span><span class="py">.weight</span><span class="p">);</span>
        <span class="k">let</span> <span class="n">color_str</span> <span class="o">=</span> <span class="k">match</span> <span class="o">&amp;</span><span class="k">self</span><span class="py">.color</span> <span class="p">{</span>
            <span class="nn">BoxColor</span><span class="p">::</span><span class="n">Blue</span> <span class="k">=&gt;</span> <span class="s">"blue"</span><span class="p">,</span>
            <span class="nn">BoxColor</span><span class="p">::</span><span class="n">Yellow</span> <span class="k">=&gt;</span> <span class="s">"yellow"</span><span class="p">,</span>
            <span class="nn">BoxColor</span><span class="p">::</span><span class="n">Red</span> <span class="k">=&gt;</span> <span class="s">"red"</span><span class="p">,</span>
        <span class="p">};</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"- It is {color_str}"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">heavy_blue_box</span><span class="p">:</span> <span class="n">ShippingBox</span> <span class="o">=</span> <span class="nn">ShippingBox</span><span class="p">::</span><span class="nf">create</span><span class="p">([</span><span class="mf">232.3</span><span class="p">,</span><span class="mf">235.2</span><span class="p">,</span><span class="mf">512.3</span><span class="p">],</span> <span class="mf">65.32</span><span class="p">,</span> <span class="nn">BoxColor</span><span class="p">::</span><span class="n">Blue</span><span class="p">);</span>
    <span class="n">heavy_blue_box</span><span class="nf">.p_box</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">tiny_yellow_box</span><span class="p">:</span> <span class="n">ShippingBox</span> <span class="o">=</span> <span class="nn">ShippingBox</span><span class="p">::</span><span class="nf">create</span><span class="p">([</span><span class="mf">12.2</span><span class="p">,</span><span class="mf">25.5</span><span class="p">,</span><span class="mf">21.2</span><span class="p">],</span> <span class="mf">2.1</span><span class="p">,</span> <span class="nn">BoxColor</span><span class="p">::</span><span class="n">Yellow</span><span class="p">);</span>
    <span class="n">tiny_yellow_box</span><span class="nf">.p_box</span><span class="p">();</span>
    
    <span class="k">let</span> <span class="n">massive_red_box</span><span class="p">:</span> <span class="n">ShippingBox</span> <span class="o">=</span> <span class="nn">ShippingBox</span><span class="p">::</span><span class="nf">create</span><span class="p">([</span><span class="mf">1267.2</span><span class="p">,</span><span class="mf">2567.5</span><span class="p">,</span><span class="mf">2671.2</span><span class="p">],</span> <span class="mf">223.1</span><span class="p">,</span> <span class="nn">BoxColor</span><span class="p">::</span><span class="n">Red</span><span class="p">);</span>
    <span class="n">massive_red_box</span><span class="nf">.p_box</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h3 id="33922-lecture---vectors"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=13162s">3:39:22</a> Lecture - Vectors</h3>
<ul>
  <li>Vector is a data type that lets you store multiple pieces of data
    <ul>
      <li>These must be of the same type.</li>
    </ul>
  </li>
  <li>Used for lists of information</li>
  <li><code class="language-plaintext highlighter-rouge">let x = vec![data,data2,data3]</code> for known</li>
  <li><code class="language-plaintext highlighter-rouge">let mut y = Vec::new();</code> for mutable, or</li>
  <li><code class="language-plaintext highlighter-rouge">z: vec![type;amount],</code> in Struct fields</li>
  <li>You can add, remove and traverse these entries.
    <ul>
      <li>add via the <code class="language-plaintext highlighter-rouge">.push(&lt;item to add&gt;)</code> function</li>
      <li>remove via the <code class="language-plaintext highlighter-rouge">.pop(&lt;index to remove&gt;)</code> function</li>
      <li>return length via the <code class="language-plaintext highlighter-rouge">.len()</code> function</li>
      <li>access via the slice notation <code class="language-plaintext highlighter-rouge">&lt;vector name&gt;[&lt;index&gt;]</code></li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="34419-demo---vectors"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=13459s">3:44:19</a> Demo - Vectors</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Test</span> <span class="p">{</span>
    <span class="n">score</span><span class="p">:</span> <span class="nb">i32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span> <span class="p">(){</span>
     <span class="k">let</span> <span class="n">my_scores</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Test</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span>
        <span class="n">Test</span> <span class="p">{</span> <span class="n">score</span><span class="p">:</span> <span class="mi">89</span> <span class="p">},</span>
        <span class="n">Test</span> <span class="p">{</span> <span class="n">score</span><span class="p">:</span> <span class="mi">65</span> <span class="p">},</span>
        <span class="n">Test</span> <span class="p">{</span> <span class="n">score</span><span class="p">:</span> <span class="mi">74</span> <span class="p">},</span>
        <span class="n">Test</span> <span class="p">{</span> <span class="n">score</span><span class="p">:</span> <span class="mi">12</span> <span class="p">},</span>
        <span class="n">Test</span> <span class="p">{</span> <span class="n">score</span><span class="p">:</span> <span class="mi">32</span> <span class="p">},</span>
     <span class="p">];</span>

     <span class="k">for</span> <span class="n">test</span> <span class="k">in</span> <span class="n">my_scores</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"score = {:?}"</span><span class="p">,</span> <span class="n">test</span><span class="py">.score</span><span class="p">);</span>
     <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="34651-exercise---vectors"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=13611s">3:46:51</a> Exercise - Vectors</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Topic: Vectors</span>
<span class="c1">//</span>
<span class="c1">// Requirements:</span>
<span class="c1">// * Print 10, 20, "thirty", and 40 in a loop</span>
<span class="c1">// * Print the total number of elements in a vector</span>
<span class="c1">//</span>
<span class="c1">// Notes:</span>
<span class="c1">// * Use a vector to store 4 numbers</span>
<span class="c1">// * Iterate through the vector using a for..in loop</span>
<span class="c1">// * Determine whether to print the number or print "thirty" inside the loop</span>
<span class="c1">// * Use the .len() function to print the number of elements in a vector</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">numbers</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">];</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">numbers</span> <span class="p">{</span>
        <span class="k">match</span> <span class="n">i</span> <span class="p">{</span>
            <span class="mi">30</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"thirty"</span><span class="p">),</span>
            <span class="n">_</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span> <span class="n">i</span><span class="p">),</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"The vector </span><span class="se">\"</span><span class="s">numbers</span><span class="se">\"</span><span class="s"> contains {:?} items"</span><span class="p">,</span> <span class="n">numbers</span><span class="nf">.len</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="35341-lecture---string"><a href="https://www.youtube.com/watch?v=lzKeecy4OmQ&amp;t=14021s">3:53:41</a> Lecture - String</h3>
<ul>
  <li>Strings are used to store text information
    <ul>
      <li>Two common types are:</li>
      <li>String - <strong>owned</strong></li>
      <li>&amp;str - <strong>borrowed</strong> String slice</li>
    </ul>
  </li>
  <li>Using String data in a struct requires an owned String</li>
  <li>Use &amp;str when passing to a function</li>
</ul>

<p>Example - Pass to function</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<hr />

<!-- ### [3:57:44](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=14264s) Demo - Strings -->

<!-- --- -->

<!-- ### [4:02:15](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=14535s) Exercise - Strings -->

<!-- --- -->

<!-- ### [4:09:40](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=14980s) Demo - Derive -->

<!-- --- -->

<!-- ### [4:15:51](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=15351s) Lecture - Type Annotations -->

<!-- --- -->

<!-- ### [4:20:02](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=15602s) Lecture - Enum Revisited -->

<!-- --- -->

<!-- ### [4:24:04](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=15844s) Demo Advanced Match -->

<!-- --- -->

<!-- ### [4:32:04](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=16324s) Exercise Advanced Match -->

<!-- --- -->

<!-- ### [4:42:49](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=16969s) Lecture - Option -->

<!-- --- -->

<!-- ### [4:49:18](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=17358s) Demo - Option -->

<!-- --- -->

<!-- ### [4:53:48](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=17628s) Activity Option -->

<!-- --- -->

<!-- ### [4:58:52](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=17932s) Demo Documentation -->

<!-- --- -->

<!-- ### [5:01:20](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=18080s) Demo - Standard Library -->

<!-- --- -->

<!-- ### [5:04:56](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=18296s) Exercise - Utilizing SLF -->

<!-- --- -->

<!-- ### [5:08:45](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=18525s) Lecture - Result -->

<!-- --- -->

<!-- ### [5:13:28](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=18808s) Demo - Result -->

<!-- --- -->

<!-- ### [5:27:47](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=19667s) Exercise - Result -->

<!-- --- -->

<!-- ### [5:34:29](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=20069s) Exercise - Result and ? Operator -->

<!-- --- -->

<!-- ### [5:42:23](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=20543s) Lecture - Hashmap -->

<!-- --- -->

<!-- ### [5:46:46](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=20806s) Demo - Hashmap -->

<!-- --- -->

<!-- ### [5:52:21](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=21141s) Exercise - Hashmap -->

<!-- --- -->

<!-- ### [6:00:49](https://www.youtube.com/watch?v=lzKeecy4OmQ&t=21649s) Where to keep learning & how to get hired as a Rust Developer -->]]></content><author><name></name></author><category term="programming," /><category term="open-source" /><summary type="html"><![CDATA[brain dump / notes zone]]></summary></entry><entry><title type="html">getting started with stardust xr</title><link href="https://sambilbow.com/blog/2023/getting-started-with-stardust-xr/" rel="alternate" type="text/html" title="getting started with stardust xr" /><published>2023-05-11T00:00:00+00:00</published><updated>2023-05-11T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/getting-started-with-stardust-xr</id><content type="html" xml:base="https://sambilbow.com/blog/2023/getting-started-with-stardust-xr/"><![CDATA[<h2 id="summary">Summary</h2>
<hr />
<p>As part of <a href="/projects/comuse/">coMuse</a> I hope to move towards a fully open-source stack for multi-user musical AR experience. In my <a href="/blog/2023/north-star-on-linux">last post</a> on this topic, I went through how I set up Linux with Monado and OpenXR to recognise the North Star headset, and utilise its hand and head tracking sensors. This post will be about <a href="https://stardustxr.org/">Stardust XR</a>.</p>

<p>Stardust is a system UI framework where multiple different clients (programs that connect to Stardust directly) can create objects for the user to interact with their apps and device. The user can choose to use the objects that work best for their current scenario, and default setups can easily be created so users start out with all the essentials.</p>

<p>The value of this for <a href="/projects/comuse/">coMuse</a> lies in the ability to render and interact with software that exists in 2D forms without having to rebuild or port them to AR. This sits within the developer workflow nicely as it allows for a fully AR setup without switching between AR and 2D displays. Additionally it benefits the participant or audience, as they will likely be experiencing pre-composed Godot scenes or applications built with Stereokit that can sit within Stardust XR.</p>

<p>Some preliminary ideas for developer workflow bindings</p>
<ul>
  <li>Gestural interactions with already visual languages like <a href="https://puredata.info/">PureData</a></li>
  <li>Adding gestural interactivity for code-based computer music languages, like <a href="https://supercollider.github.io/">Supercollider</a> and <a href="https://glicol.org/">Glicol</a></li>
</ul>

<p>Some preliminary ideas for audience interface with Stardust</p>
<ul>
  <li>Ease of switching between experiences via panel shells</li>
  <li>Menu style launcher</li>
  <li>Modularity between instruments, which could be their own OpenXR applications.</li>
</ul>

<p><strong>Revised Linux Stack</strong></p>

<p>North Star ‚Üí OpenXR ‚Üí Monado ‚Üí Stardust XR ‚Üí Application(s), both 2D and 3D</p>

<p><br /></p>

<h2 id="installation-of-stardust-xr">Installation of Stardust XR</h2>
<hr />
<ol>
  <li>Install prerequisites found <a href="https://stardustxr.org/docs/getting-started/install">here</a>, i.e.:
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yay <span class="nt">-S</span> cargo flatbuffers seatd fontconfig wayland openxr-git libglvnd mesa libx11 libxext libxfixes clang <span class="nt">--needed</span>
</code></pre></div>    </div>
  </li>
  <li>Download <a href="https://github.com/StardustXR/telescope">telescope</a>, a bash setup guide for Stardust XR.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/StardustXR/telescope
</code></pre></div>    </div>
  </li>
  <li>Enter the folder and run the setup to download Stardust XR‚Äôs first party clients.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>telescope <span class="o">&amp;&amp;</span> <span class="se">\</span>
./setup.sh
</code></pre></div>    </div>
  </li>
  <li>For each first-party client you want to run, enter its folder now downloaded into <code class="language-plaintext highlighter-rouge">repos/</code> and build. We‚Äôll build <code class="language-plaintext highlighter-rouge">stardust-xr-server</code> and <code class="language-plaintext highlighter-rouge">comet</code>.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>server <span class="o">&amp;&amp;</span> <span class="se">\</span>
cargo build <span class="nt">--release</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">cd</span> ../comet <span class="o">&amp;&amp;</span> <span class="se">\</span>
cargo build <span class="nt">--release</span>
</code></pre></div>    </div>
  </li>
  <li>For ease, lets add the binaries that have been build in each <code class="language-plaintext highlighter-rouge">target/release/</code> folder to our <code class="language-plaintext highlighter-rouge">zsh</code> <code class="language-plaintext highlighter-rouge">PATH</code> so that we can run them from anywhere. Add the following to your <code class="language-plaintext highlighter-rouge">~/.zshrc</code> using a text editor like <code class="language-plaintext highlighter-rouge">vim</code> or <code class="language-plaintext highlighter-rouge">nano</code>, taking care to replace <code class="language-plaintext highlighter-rouge">&lt;telescope location&gt;</code> with the absolute path to <code class="language-plaintext highlighter-rouge">telescope/</code>, i.e. <code class="language-plaintext highlighter-rouge">find ~/Documents/repos/telescope/repos/*/target/release/]</code>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span><span class="si">$(</span>find &lt;telescope location&gt;/repos/<span class="k">*</span>/target/release/ <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> f <span class="nt">-executable</span> <span class="nt">-printf</span> <span class="s2">":%h"</span><span class="si">)</span>
</code></pre></div>    </div>
  </li>
  <li>Close and open a new terminal window or run <code class="language-plaintext highlighter-rouge">exec zsh</code> to refresh. Check that <code class="language-plaintext highlighter-rouge">PATH</code> was updated with <code class="language-plaintext highlighter-rouge">echo $PATH</code>. You should see the Stardust release folders added at the end.</li>
</ol>

<p><br /></p>

<h2 id="running-a-comet-a-first-party-stardust-xr-client">Running a <code class="language-plaintext highlighter-rouge">comet</code>, a first-party Stardust XR client</h2>
<hr />
<p>Stardust XR is an OpenXR client itself, but it runs on top of Monado for now. This means that you must have <code class="language-plaintext highlighter-rouge">monado-service</code> running, so that the server can connect to it, and serve clients.</p>
<ol>
  <li>Plug in your North Star headset via USB 2.0</li>
  <li>Plug in your North Star via DisplayPort to your graphics card.</li>
  <li>Force <code class="language-plaintext highlighter-rouge">portReset()</code> on your North Star, via holding down the circle and dot buttons for 5 seconds.</li>
  <li>Open three terminal windows</li>
  <li>Run <code class="language-plaintext highlighter-rouge">monado-service</code> in the first terminal window.</li>
  <li>A grey, fullscreen Xwayland Monado window should open on your main display. Move it to your North Star display, e.g by using the Kwin shortcut <code class="language-plaintext highlighter-rouge">Meta-Shift-right</code></li>
  <li>In the second terminal window, run <code class="language-plaintext highlighter-rouge">stardust-xr-server</code>. The display of the headset should switch from grey to black</li>
  <li>In the third terminal window, run <code class="language-plaintext highlighter-rouge">comet</code></li>
  <li>If all goes well you should have 6DoF and hand tracking running in Stardust XR, and you should be able to grab the red pen in front of / above you and draw with it.</li>
</ol>

<p><br /></p>

<h2 id="example-video">Example video</h2>
<hr />
<div class="row">
    <div class="col-sm mt-3 mt-md-0">
        <div class="embed-responsive embed-responsive-16by9"><iframe src="https://www.youtube-nocookie.com/embed/zG__m-gV1qI" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe></div>
    </div>
</div>

<blockquote>
  <p>I have to use <code class="language-plaintext highlighter-rouge">gravity</code> here to run <code class="language-plaintext highlighter-rouge">comet</code> with an offset, as it seems all of my clients like to run about a metre above my head for some reason!</p>
</blockquote>]]></content><author><name></name></author><category term="open-source" /><category term="linux" /><category term="augmented-reality" /><summary type="html"><![CDATA[an open-source linux xr display server]]></summary></entry><entry><title type="html">üé© moving to bobovr headgear</title><link href="https://sambilbow.com/blog/2023/bobovr-headgear/" rel="alternate" type="text/html" title="üé© moving to bobovr headgear" /><published>2023-05-10T00:00:00+00:00</published><updated>2023-05-10T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/bobovr-headgear</id><content type="html" xml:base="https://sambilbow.com/blog/2023/bobovr-headgear/"><![CDATA[<h2 id="bobovr-m2-plus">BoboVR M2 Plus</h2>

<p>Adaptor designed and shared by Noah Zerkin</p>
<blockquote>
  <p>Had to cut and grind down the slide receivers on that headgear. Want to make one more tweak tomorrow and will post. Ergonomics aren‚Äôt bad, even without the foam forehead pad that‚Äôs missing from this one. Adjustability isn‚Äôt as smooth or clever as FLZero‚Äôs, but there‚Äôs actually a little more of it in terms of vertical repositioning, and slides out at least far enough to accommodate my glasses.</p>
</blockquote>

<div align="right"><i>
@noazark, August 2022 | Project North Star Discord Server | <a href="https://discord.com/channels/456107915514871828/456857961344532492/1007685576348151900">#3d-printing</a>
</i></div>

<p><br /></p>

<div class="row" align="center">
    <div class="col-sm mt-1 mt-md-0">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/bobovr-1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
    <div class="col-sm mt-1 mt-md-0">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/bobovr-2.png" class="img-fluid rounded z-depth-1" width="180px" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>
<div class="caption">
BoboVR Deck X with Boll√© Welding Headgear Deck X in the background on an original calibration stand, and a cable view of the BoboVR with Velcro &amp; zip tie solution
</div>

<h2 id="what-to-print">What to print</h2>
<p><code class="language-plaintext highlighter-rouge">BoboAdapterL.stl</code> (<a href="https://github.com/sambilbow/Deck-X/blob/main/Deck_X/STL_files/Headgear/BoboVR_Headgear_Adaptor/BoboAdapterL.stl">link</a>), for the left side, then again but flip on the x-axis for the right side.</p>

<h2 id="what-to-buy">What to buy</h2>
<p>BoboVR M2 Plus (model without the battery) <a href="https://www.amazon.co.uk/dp/B0B2RP1N4F?psc=1&amp;ref=ppx_yo2ov_dt_b_product_details">[Amazon]</a> <a href="https://www.aliexpress.com/item/1005002603950456.html?pdp_npi=2%40dis%21GBP%21%EF%BF%A1128.91%21%EF%BF%A197.28%21%21%21%21%21%40211b5e2216837427439044000ed3e8%2112000029657337934%21btf&amp;_t=pvid:fa3b44d5-9a29-4a37-8afc-d58acfa30403&amp;afTraceInfo=1005002603950456__pc__pcBridgePPC__xxxxxx__1683742744&amp;spm=a2g0o.ppclist.product.mainProduct">[AliExpress]</a></p>

<h2 id="assembly">Assembly</h2>
<ol>
  <li>Add the hex screws provided with the Deck X kit into the adaptors.</li>
  <li>Connect the adaptors to each side of the headgear</li>
  <li>Tighten the new headgear to the optics bracket via the hex screw</li>
  <li>Adjust fit using adaptor angle and tightness to bring optics bracket closer to the face.</li>
</ol>]]></content><author><name></name></author><category term="open-source" /><category term="augmented-reality" /><category term="hardware" /><summary type="html"><![CDATA[a comfier headgear solution]]></summary></entry><entry><title type="html">üî≠ siril + gimp for foss astrophotography</title><link href="https://sambilbow.com/blog/2023/siril/" rel="alternate" type="text/html" title="üî≠ siril + gimp for foss astrophotography" /><published>2023-04-26T00:00:00+00:00</published><updated>2023-04-26T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/siril</id><content type="html" xml:base="https://sambilbow.com/blog/2023/siril/"><![CDATA[<h2 id="summary">Summary</h2>

<div class="row">
    <div class="col-sm mt-3 mt-md-0">
        <div class="embed-responsive embed-responsive-16by9"><iframe src="https://www.youtube-nocookie.com/embed/TibmrYJEgVA" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe></div>
    </div>
</div>
<div class="caption">
    I followed along to this video by Nebula Photos, stacking, and editing a JWST <a href="https://www.nasa.gov/feature/goddard/2022/nasa-s-webb-takes-star-filled-portrait-of-pillars-of-creation/">image</a> of the Pillars of Creation.
</div>

<div class="row">
    <div class="col-sm mt-1 mt-md-0">
        <figure>
  
    <picture>
      
      <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="-480.webp" />
      <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="-800.webp" />
      <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="-1400.webp" />
      

      <!-- Fallback to the original file -->
      <img src="/assets/img/pillars.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="a photo" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

    </picture>
  
</figure>

    </div>
</div>
<div class="caption">
    Not great, not terrible, but lots of fun! üî≠
</div>]]></content><author><name></name></author><category term="open-source" /><category term="astronomy" /><summary type="html"><![CDATA[free and open-source image stacking / editing]]></summary></entry><entry><title type="html">üíé jekyll + chatgpt</title><link href="https://sambilbow.com/blog/2023/jekyll-chatgpt/" rel="alternate" type="text/html" title="üíé jekyll + chatgpt" /><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><id>https://sambilbow.com/blog/2023/jekyll-chatgpt</id><content type="html" xml:base="https://sambilbow.com/blog/2023/jekyll-chatgpt/"><![CDATA[<h2 id="summary">Summary</h2>
<p>I‚Äôve been learning more Jekyll-related things like Ruby, some new Markdown tricks, and the web trio to make a nicer site. ChatGPT has been really helpful in moving towards a working understanding of how I can edit the template that I‚Äôm using (<a href="https://github.com/alshedivat/al-folio">al-folio</a>). It takes a fair amount of time to engineer prompts, but it helps that I know generally what the code I want should perform.</p>

<p><br /></p>

<h2 id="code-blocks">Code Blocks</h2>
<p>For example, I wanted to edit the way that code blocks were rendered in my recent <a href="/blog/2023/north-star-on-linux">blog post</a>. One thing led to another and I ended up trying to render codeblocks straight from files in my <code class="language-plaintext highlighter-rouge">/assets/</code> folder instead of adding the code to the <code class="language-plaintext highlighter-rouge">.md</code> file. This way, if I needed to update the code (in this case, <code class="language-plaintext highlighter-rouge">.json</code> configuration files), I could upload an update to my site folder via a git commit.</p>

<p>This was achieved by some Ruby code that ChatGPT generated that rendered the contents of the file within the correct HTML tags, generating the code block with a Liquid template called <code class="language-plaintext highlighter-rouge">code_block.html</code>.</p>

<p><br /></p>

<h2 id="gist-code-blocks">Gist Code Blocks</h2>
<p>After a couple of hours of co-engineering ü§î, I ended up deciding to host the file on Gist, and prompting ChatGPT to edit the code, which it ‚Äúdecided‚Äù to do by writing a Ruby plugin. Brilliant! A later iteration added an error fallback in the event that I was being rate-limited by GitHub‚Äôs API.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">class</span> <span class="nc">GistTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
      <span class="k">super</span>
      <span class="vi">@gist_id</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="nf">strip</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
      <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="s2">"https://api.github.com/gists/</span><span class="si">#{</span><span class="vi">@gist_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
      <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>

      <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"API rate limit exceeded"</span><span class="p">)</span>
        <span class="k">return</span> <span class="s2">"`Error: API rate-limited by GitHub, follow link instead`"</span>
      <span class="k">end</span>

      <span class="n">json</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>

      <span class="c1"># Extract the first file from the gist</span>
      <span class="n">filename</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s1">'files'</span><span class="p">].</span><span class="nf">first</span>

      <span class="c1"># Capture the file contents as a string</span>
      <span class="n">captured</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"{% capture gist_content %}</span><span class="si">#{</span><span class="n">file</span><span class="p">[</span><span class="s1">'content'</span><span class="p">]</span><span class="si">}</span><span class="s2">{% endcapture %}"</span><span class="p">).</span><span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>

      <span class="c1"># Build the code block with the captured contents and custom data attribute</span>
      <span class="n">code_block</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"{% highlight </span><span class="si">#{</span><span class="n">file</span><span class="p">[</span><span class="s1">'language'</span><span class="p">]</span><span class="si">}</span><span class="s2"> %}{{ gist_content }}{% endhighlight %}"</span><span class="p">).</span><span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>

      <span class="c1"># Wrap the code block in a div with the correct classes and custom data attribute</span>
      <span class="n">code_block</span> <span class="o">=</span> <span class="s2">"&lt;div class='language-</span><span class="si">#{</span><span class="n">file</span><span class="p">[</span><span class="s1">'language'</span><span class="p">].</span><span class="nf">downcase</span><span class="si">}</span><span class="s2"> highlighter-rouge' data-gist-url='https://gist.github.com/</span><span class="si">#{</span><span class="n">json</span><span class="p">[</span><span class="s1">'owner'</span><span class="p">][</span><span class="s1">'login'</span><span class="p">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="vi">@gist_id</span><span class="si">}</span><span class="s2">'&gt;</span><span class="si">#{</span><span class="n">code_block</span><span class="si">}</span><span class="s2">&lt;/div&gt;"</span>

      <span class="c1"># Return the generated code block</span>
      <span class="n">code_block</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="p">.</span><span class="nf">register_tag</span><span class="p">(</span><span class="s1">'gist'</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">GistTag</span><span class="p">)</span>
</code></pre></div></div>

<p>This allows me to add the following tag to my <code class="language-plaintext highlighter-rouge">.md</code> posts:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% gist 3b7b257b535b3dd6fa7b53ad7e453ed0 %}
</code></pre></div></div>

<p>and have it render in a native Jekyll codeblock, using <code class="language-plaintext highlighter-rouge">rouge</code> and <code class="language-plaintext highlighter-rouge">highlight</code>.</p>

<div class="language-json highlighter-rouge" data-gist-url="https://gist.github.com/sambilbow/3b7b257b535b3dd6fa7b53ad7e453ed0">
<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="nl">"$schema"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://monado.pages.freedesktop.org/monado/config_v0.schema.json"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>
</div>

<p><br /></p>

<h2 id="link-to-gist-button">Link to Gist button</h2>

<p>Additionally, I prompted ChatGPT to create a button in the top right hand corner of Gist codeblocks that links to their page, in the same style as the copy to clipboard button:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">gistUrl</span> <span class="o">=</span> <span class="nx">codeBlock</span><span class="p">.</span><span class="nf">closest</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">).</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">gistUrl</span><span class="p">;</span>
<span class="k">if </span><span class="p">(</span><span class="nx">gistUrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">githubButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">githubButton</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">github</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">githubButton</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">githubButton</span><span class="p">.</span><span class="nx">ariaLabel</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">View Gist on GitHub</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">githubButton</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">&lt;i class="fab fa-github"&gt;&lt;/i&gt;</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">codeBlock</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">githubButton</span><span class="p">);</span>

    <span class="c1">// open GitHub link to view Gist</span>
    <span class="nx">githubButton</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nx">gistUrl</span><span class="p">,</span> <span class="dl">'</span><span class="s1">_blank</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="advantages-compared-to-gistidjs">Advantages compared to <code class="language-plaintext highlighter-rouge">GistID.js</code></h2>

<p>I think this suits the styling of the website more than the native <code class="language-plaintext highlighter-rouge">GistID.js</code> codeblock, which is provided by sourcing <code class="language-plaintext highlighter-rouge">https://gist.github.com/&lt;githubUser&gt;/&lt;gistID&gt;.js</code> for example.  The <code class="language-plaintext highlighter-rouge">jekyll-gist</code> <a href="https://github.com/jekyll/jekyll-gist">plugin</a> provides a Liquid tag that does this for you when calling <code class="language-plaintext highlighter-rouge">{% gist &lt;gistID&gt; %}</code>. It looks like this:
<script src="https://gist.github.com/sambilbow/3b7b257b535b3dd6fa7b53ad7e453ed0.js"> </script></p>

<p>I like the border, line numbers, and file name so I might implement that. But overall, the styling from <code class="language-plaintext highlighter-rouge">rouge</code> is nicer, the functionality of the copy to clipboard button is brilliant, and overall it relies on less JavaScript I believe.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I might add some snippets here and there to future blog posts about Jekyll, but for the moment, I hope this shows the power of ChatGPT in playing with libraries and languages you‚Äôre not to familiar with.</p>]]></content><author><name></name></author><category term="open-source" /><category term="website" /><summary type="html"><![CDATA[supercharged blog learning]]></summary></entry></feed>